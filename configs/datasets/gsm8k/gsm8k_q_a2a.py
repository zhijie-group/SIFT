from opencompass.openicl.icl_prompt_template import PromptTemplate
from opencompass.openicl.icl_retriever import ZeroRetriever
from opencompass.openicl.icl_inferencer import GenInferencer
from opencompass.datasets import NewGSM8KDataset, gsm8k_postprocess, gsm8k_dataset_postprocess, Gsm8kEvaluator
from opencompass.datasets import MATHEvaluator, math_postprocess_v2

gsm8k_reader_cfg = dict(input_columns=['question','abstract'], output_column='answer')

gsm8k_infer_cfg = dict(
    prompt_template=dict(
        type=PromptTemplate,
        template=dict(
            round=[
                dict(role='HUMAN', prompt="Given a query and a candidate abstract (which includes conditions and a question), output an optimized abstract.\n\n---\n\nRequirements:\n1. Definitions of Conditions and Question:\n    * Conditions: Clearly list all the given information. Write each condition on a separate line, numbered sequentially.\n    * Question: Summarize what is being asked in one clear sentence. Remove all known conditions.\n2. Focus of Optimization: Compare the Original Query with the candidate Abstract. Identify and fix:\n    * Missing/incorrect/redundant conditions\n    * Imprecise question phrasing\n    * Mathematical/logical inconsistencies\n    * Output format error\n\n---\n\nOutput Format:\n```\n**Conditions:**\n1. [optimized Condition 1]\n2. [optimized Condition 2]\n...(add more conditions as needed)\n\n**Question:**\n[Optimized question phrasing. Clearly state what is being asked.]\n```\n\n---\n\n>>> Example 1: Missing/Redundant Conditions\n\nInput:\n```\nOriginal Query:\nA box has 12 red marbles. 3 marbles are removed. What percentage remains?\n\nCandidate Abstract:\n**Conditions:**\n1. A box has 12 red marbles.\n\n**Question:**\nWhat percentage of marbles remains?\n```\n\nExpected Output:\n```\n**Conditions:**\n1. A box initially has 12 red marbles.\n2. 3 marbles are removed.\n\n**Question:**\nWhat percentage of the original marbles remains?\n```\n\n---\n\n>>> Example 2: Imprecise Question\n\nInput\n```\nOriginal Query:\nIf Alice reads 30 pages daily, how many books can she finish in a month?\n\nCandidate Abstract:\n**Conditions:**\n1. Alice reads 30 pages daily.\n2. Each book has 300 pages.\n\n**Question:**\nCalculate the total number of books.\n```\n\nExpected Output:\n```\n**Conditions:**\n1. Alice reads 30 pages daily.\n2. Each book has 300 pages.\n3. A month has 30 days.\n\n**Question:**\nHow many full books can Alice finish in one month?\n```\n\n>>> Example 3: Logical Inconsistency\n\nInput:\n```\nOriginal Query:\nA rectangle’s length is doubled. Its width is tripled. Find the area change.\n\nCandidate Abstract:\n**Conditions:**\n1. Original length = 5 units\n2. Original width = 4 units\n3. New length = 10 units\n4. New width = 7 units\n\n**Question:**\nWhat is the new area?\n```\n\nExpected Output:\n```\n**Conditions:**\n1. A rectangle’s length is doubled.\n2. Its width is tripled.\n\n**Question:**\nBy what factor does the area of the rectangle increase?\n```\n\n>>> Example 4: Format Error\n\nInput:\n```\nOriginal Query:\nSolve 2x + 5 = 15\n\nCandidate Abstract:\n**Conditions:**\n- Equation: 2x + 5 = 15\n\n**Question:** Find x\n```\n\nExpected Output:\n```\n**Conditions:**\n1. Equation: 2x + 5 = 15\n\n**Question:**\nFind x\n```\n\n---\n\nInput to Process:\n```\nOriginal Query:\n{question}\n\nCandidate Abstract:\n{abstract}\n```\n\n---\n\nPlease provide your output strictly following the output format without other unnecessary words."),
                # dict(role='HUMAN', prompt="Given a query and a candidate abstract (which includes conditions and a question), output an optimized abstract.\n\n---\n\nRequirements:\n1. Definitions of Conditions and Question:\n    * Conditions: Clearly list all the given information. Write each condition on a separate line, numbered sequentially.\n    * Question: Summarize what is being asked in one clear sentence. Remove all known conditions.\n2. Focus of Optimization: Compare the Original Query with the candidate Abstract. Identify and fix:\n    * Missing/incorrect/redundant conditions\n    * Imprecise question phrasing\n    * Mathematical/logical inconsistencies\n    * Output format error\n\n---\n\nOutput Format:\n```\n**Conditions:**\n1. [optimized Condition 1]\n2. [optimized Condition 2]\n...(add more conditions as needed)\n\n**Question:**\n[Optimized question phrasing. Clearly state what is being asked.]\n```\n\n---\n\nInput to Process:\n```\nOriginal Query:\n{question}\n\nCandidate Abstract:\n{abstract}\n```\n\n---\n\nPlease provide your output strictly following the output format without other unnecessary words."),
                # dict(role='HUMAN', prompt="Given a query and a candidate abstract (which includes conditions and a question), output an optimized abstract. The output must differ from the candidate abstract in at least one aspect (e.g., adding missing conditions, correcting phrasing, or rewording the question). Do not simply copy the candidate abstract.\n\n---\n\nRequirements:\n1. Definitions of Conditions and Question:\n    * Conditions: Clearly list all the given information. Write each condition on a separate line, numbered sequentially.\n    * Question: Summarize what is being asked in one clear sentence. Remove all known conditions.\n2. Focus of Optimization: Compare the Original Query with the candidate Abstract. Identify and fix:\n    * Missing/incorrect/redundant conditions\n    * Imprecise question phrasing\n    * Mathematical/logical inconsistencies\n    * Output format error\n    * Any aspect that could make the question clearer or more precise\n\n---\n\nOutput Format:\n```\n**Conditions:**\n1. [optimized Condition 1]\n2. [optimized Condition 2]\n...(add more conditions as needed)\n\n**Question:**\n[Optimized question phrasing. Clearly state what is being asked.]\n```\n\n---\n\n>>> Example 1: Missing/Redundant Conditions\n\nInput:\n```\nOriginal Query:\nA box has 12 red marbles. 3 marbles are removed. What percentage remains?\n\nCandidate Abstract:\n**Conditions:**\n1. A box has 12 red marbles.\n\n**Question:**\nWhat percentage of marbles remains?\n```\n\nExpected Output:\n```\n**Conditions:**\n1. A box initially has 12 red marbles.\n2. 3 marbles are removed.\n\n**Question:**\nWhat percentage of the original marbles remains?\n```\n\n---\n\n>>> Example 2: Imprecise Question\n\nInput\n```\nOriginal Query:\nIf Alice reads 30 pages daily, how many books can she finish in a month?\n\nCandidate Abstract:\n**Conditions:**\n1. Alice reads 30 pages daily.\n2. Each book has 300 pages.\n\n**Question:**\nCalculate the total number of books.\n```\n\nExpected Output:\n```\n**Conditions:**\n1. Alice reads 30 pages daily.\n2. Each book has 300 pages.\n3. A month has 30 days.\n\n**Question:**\nHow many full books can Alice finish in one month?\n```\n\n>>> Example 3: Logical Inconsistency\n\nInput:\n```\nOriginal Query:\nA rectangle’s length is doubled. Its width is tripled. Find the area change.\n\nCandidate Abstract:\n**Conditions:**\n1. Original length = 5 units\n2. Original width = 4 units\n3. New length = 10 units\n4. New width = 7 units\n\n**Question:**\nWhat is the new area?\n```\n\nExpected Output:\n```\n**Conditions:**\n1. A rectangle’s length is doubled.\n2. Its width is tripled.\n\n**Question:**\nBy what factor does the area of the rectangle increase?\n```\n\n>>> Example 4: Format Error\n\nInput:\n```\nOriginal Query:\nSolve 2x + 5 = 15\n\nCandidate Abstract:\n**Conditions:**\n- Equation: 2x + 5 = 15\n\n**Question:** Find x\n```\n\nExpected Output:\n```\n**Conditions:**\n1. Equation: 2x + 5 = 15\n\n**Question:**\nFind x\n```\n\n---\n\nInput to Process:\n```\nOriginal Query:\n{question}\n\nCandidate Abstract:\n{abstract}\n```\n\n---\n\nPlease provide your output strictly following the output format without other unnecessary words, and ensure your output differs from the candidate abstract in at least one aspect."),
            ],
        ),
    ),
    retriever=dict(type=ZeroRetriever),
    inferencer=dict(type=GenInferencer, max_out_len=1024, batch_size=8), ## max_out_len=512, batch_size=32 # 4096, 8
)

gsm8k_eval_cfg = dict(
    evaluator=dict(type=MATHEvaluator, version='v2'),
    pred_postprocessor=dict(type=math_postprocess_v2),
    dataset_postprocessor=dict(type=gsm8k_dataset_postprocess),
)

gsm8k_datasets = [
    dict(
        abbr='gsm8k',
        type=NewGSM8KDataset,
        path='outputs/llama3_2_3b_chat/gsm8k/0215_1_dim_sift/epoch16/abs3/p2a/q_a.jsonl',
        reader_cfg=gsm8k_reader_cfg,
        infer_cfg=gsm8k_infer_cfg,
        eval_cfg=gsm8k_eval_cfg,
    )
]
